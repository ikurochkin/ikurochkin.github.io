<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ikurochkin.github.io</title>
    <description></description>
    <link>http://ikurochkin.github.io/</link>
    <atom:link href="http://ikurochkin.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 16 Aug 2015 19:46:48 +0300</pubDate>
    <lastBuildDate>Sun, 16 Aug 2015 19:46:48 +0300</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Тестируем инфраструктуру как код</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://habrastorage.org/files/8d7/549/5ce/8d75495ce9684ca3895ecae54b43db07.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Всем привет, сегодня я расскажу зачем тестировать инфраструктуру, какие инструменты для этого есть и как все это автоматизировать. Также затрону тему публикации инфраструктурного кода в open source. Статья будет интересна пользователям любой из популярных систем управления конфигурацией - Chef, Puppet, Ansible или SaltStack.&lt;/p&gt;
&lt;habracut /&gt;

&lt;p&gt;Статья основана на моих выступлениях на конференциях &lt;a href=&quot;http://nastachku.ru&quot;&gt;Стачка&lt;/a&gt;, RootConf и DevConf, слайды доступны &lt;a href=&quot;http://www.slideshare.net/ikurochkin/&quot;&gt;здесь&lt;/a&gt;, первая версия статьи есть на &lt;a href=&quot;http://habrahabr.ru/company/express42/blog/256725/&quot;&gt;Хабре&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Тесты?&lt;/h4&gt;
&lt;p&gt;Если инфраструктура становится кодом, то хороший код должен быть покрыт тестами. Тесты помогают не бояться вносить изменения, повышают качество и скорость написания кода, дают обратную связь. Код, покрытый тестами, проще поддерживать, он проще в эксплуатации и проще для новичков. В концепции “инфраструктура как код” тесты позволяют автоматизировать ручные действия и сохраняют много времени, а также являются документацией, они показывают, как работать с вашим кодом.&lt;/p&gt;

&lt;h4&gt;Когда актуально?&lt;/h4&gt;
&lt;p&gt;Тесты особенно актуальны, когда код изменяется, когда над ним работают несколько человек, а изменения затрагивают сложную логику или сторонний код. От изменений никуда не деться, выходят новые версии операционных систем и программ, меняются API и ваш инфраструктурный код устаревает и требует изменений.  Когда в код вносят изменения несколько человек, вы уже не можете быть уверены, что ваши изменения не затронут другие, а если вы меняете сложную логику или сторонний код, то вероятность ошибки еще выше. Стандартный подход проверки инфраструктурного кода в Vagrant здесь уже не работает, так как занимает много времени и требует ручной проверки изменений и конечного состояния.&lt;/p&gt;

&lt;h4&gt;Что делать?&lt;/h4&gt;
&lt;p&gt;Поэтому в системах управления конфигурацией появились свои инструменты для тестирования инфраструктурного кода. Я рассмотрю самые популярные и универсальные инструменты, которые подойдут для любой из систем управления конфигурацией, будь то Chef, Puppet, Ansible или SaltStack.&lt;/p&gt;

&lt;h4&gt;Что тестировать?&lt;/h4&gt;
&lt;p&gt;Но сначала надо определиться с тем, какие части будем тестировать и что проверять.
А тестировать будем основные части из которых состоит инфраструктурный код, то есть кукбуки, модули, роли или формулы, в зависимости от того, какой системой вы пользуетесь. Это то, что выкладывают на GitHub и вы используете у себя в проекте. Чаще всего эти части входят в состав базового набора, которая есть на всех серверах и этот набор стараются не трогать, так как от них зависят все остальные компоненты. Примеры: nginx, ntp, postgresql.&lt;/p&gt;

&lt;h4&gt;Что уже есть?&lt;/h4&gt;
&lt;p&gt;В системах управления конфигурацией есть встроенные механизмы, показывающие, что она будет менять, вместо внесения реальных изменений. Wry Run, Noop mode, Check mode, State testing. В Chef еще, например, происходит валидация кода при загрузке на сервер. Но этого недостаточно, иногда плохо работает, занимает много времени и требует ручных действий.&lt;/p&gt;

&lt;h4&gt;Что проверяем?&lt;/h4&gt;
&lt;p&gt;Поэтому будем дополнительно проверять следующие вещи:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;стиль языка и стиль написания кода&lt;/li&gt;
	&lt;li&gt;функционал&lt;/li&gt;
        &lt;li&gt;интеграцию&lt;/li&gt;
	&lt;li&gt;результат работы системы управления конфигурацией&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Стиль языка&lt;/h4&gt;
&lt;p&gt;Популярные системы управления конфигурацией написаны на двух языках, Ruby и Python. Для них созданы свои стайл гайды по написанию кода и желательно им следовать, чтобы ваш инфраструктурный код было легче читать и поддерживать. Для проверки стиля языка используются стандартные анализаторы кода, такие как &lt;a href=&quot;https://github.com/bbatsov/rubocop&quot;&gt;rubocop&lt;/a&gt; для Ruby и &lt;a href=&quot;https://github.com/jcrocholl/pep8&quot;&gt;pep8&lt;/a&gt; для Python. Их можно запускать вручную или они могут быть встроены в ваш редактор или IDE.&lt;/p&gt;

&lt;p&gt;Как они работают? Есть набор правил по которым они проверяют ваш код. Первый запуск этих утилит обычно приводит к получению огромной порции данных к размышлению. Поэтому вначале часть вещей можно игнорировать. Также у них есть режим автокоррекции, но с ним тоже надо быть осторожным. А у rubocop есть еще один минус, он не проверяет erb файлы, поэтому если у вас в шаблонах много руби кода, то стиль его будет отличаться.&lt;/p&gt;

&lt;h4&gt;Стиль кода&lt;/h4&gt;
&lt;p&gt;Со временем и в системах управления конфигурацией выработались свои рекомендации, появились стайл гайды и специальные инструменты - линтеры. Их нужно учитывать для выявления известных проблем. Работают они на основе набора правил. Список линтеров для систем приведен ниже:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.foodcritic.io&quot;&gt;Chef Foodcritic&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://puppet-lint.com&quot;&gt;Puppet-lint&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/willthames/ansible-lint&quot;&gt;Ansible-lint&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/lukaszraczylo/salt-lint&quot;&gt;Salt-lint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;На сайтах линтеров есть примеры хорошего кода и объяснения почему так делать не надо.&lt;/p&gt;

&lt;h4&gt;Функционал&lt;/h4&gt;
&lt;p&gt;Функционал проверяется на наборах тестовых данных, их еще называют фикстурами. Фикстуры включают в себя наборы входных данных, чтобы проверить различные варианты использования инфраструктурного кода. В простом случае это кукбук, модуль, роль или формула с параметрами по умолчанию, в сложном - вызовы модулей или провайдеров с разными параметрами. Чем больше различных вариантов в фикстурах, тем больше результата можно проверить. Также фикстуры являются примером работы с вашим инфраструктурным кодом.&lt;/p&gt;

&lt;h4&gt;Интеграция&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://habrastorage.org/files/12d/815/73d/12d81573dccf42fe8fbaff25662cb5a9.png&quot; height=&quot;100&quot; /&gt;&lt;/p&gt;

&lt;p&gt;На этапе интеграции выполняется ваш инфраструктурный код. Самый популярный инструмент для этого - это Vagrant. Все про него наверное знают, он работает на всех платформах, поддерживает разные системы виртуализации, к нему написано много плагинов, но что мне не нравится, так это Vagrantfile, сложная конфигурация в нем ужасна.&lt;/p&gt;

&lt;p&gt;Поэтому я расскажу про альтернативный инструмент для запуска инфраструктурного кода и его тестирования - Test Kitchen. Он поддерживает все системы управления конфигурацией, Chef в базе, остальные через плагины (&lt;a href=&quot;https://github.com/neillturner/kitchen-puppet&quot;&gt;Puppet&lt;/a&gt;, &lt;a href=&quot;https://github.com/neillturner/kitchen-ansible&quot;&gt;Ansible&lt;/a&gt;, &lt;a href=&quot;https://github.com/simonmcc/kitchen-salt&quot;&gt;SaltStack&lt;/a&gt;). Test Kitchen также запускает виртуальную машину, в ней запускает ваш инфраструктурный код и тесты для проверки результата. Позволяет запускать виртуальные машины как локально, так и удаленно. Конфигурация включается себя настройки для систем управления конфигурацией, образы виртуальных машин и наборы тестов. Это удобней и наглядней чем большой Vagrantfile. Является отличной альтернативой Vagrant для запуска инфраструктурного кода, так как вводит понятия набор тестов (suites) и поддерживает различные тестовые фреймворки, включая Serverspec.&lt;/p&gt;

&lt;h4&gt;Результат&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://habrastorage.org/files/3c1/b25/884/3c1b258840fb4f9bbf48eb42614e5078.png&quot; height=&quot;50&quot; /&gt;&lt;/p&gt;

&lt;p&gt;После того как отработала ваша система управления конфигурацией, нужно проверить результат ее работы.
Для проверки результата работы системы управления конфигурацией используется инструмент &lt;a href=&quot;http://serverspec.org&quot;&gt;Serverspec&lt;/a&gt;.  Это специальный фреймворк для тестирования инфраструктуры. С его помощью проверяется конечное состояние виртуальной машины или сервера. Написан на Ruby и является расширением RSpec, поддерживает все популярные Linux и BSD дистрибутивы, а также Windows. Serverspec содержит в себе около 40 встроенных ресурсов, с помощью которых можно проверить, что пакет в системе установлен, в конфиге указаны нужные параметры, сервис запущен или слушает порт. Если этого недостаточно, то можно вызвать любую shell команду и проверить ее вывод. Serverspec отличная альтернатива shell скриптам и позволяет выполнять проверки как локально, так и удаленно. Serverspec активно используется в community инфраструктурном коде.&lt;/p&gt;

&lt;p&gt;Совсем недавно Chef &lt;a href=&quot;https://www.chef.io/blog/2015/05/06/chef-audit-mode-introduction/&quot;&gt;анонсировали&lt;/a&gt; поддержку Serverspec и в рецептах, что позволяет, например, использовать Chef атрибуты внутри Serverspec. В Ansible есть встроенный механизм для тестирования, используя модули Assert, URI, Script, Fail, и разработчики &lt;a href=&quot;http://docs.ansible.com/test_strategies.html&quot;&gt;заявляют&lt;/a&gt;, что этих модулей достаточно для тестирования, но если смотреть community роли, то там все еще встречается код на bash. А для Puppet есть инструмент &lt;a href=&quot;https://github.com/logicminds/puppet-retrospec&quot;&gt;puppet-retrospec&lt;/a&gt;, который на основе кода сам создает базовые тесты, очень удобно для старта.&lt;/p&gt;

&lt;h4&gt;Как тестировать?&lt;/h4&gt;
&lt;p&gt;Инфраструктурные тесты можно запускать вручную, локально или удаленно, они могут быть встроены в редактор или IDE, выполняться при каком-либо событии, например, изменении файлов на файловой системе или в репозитории. Но самое главное это должно быть просто, иначе этим не будут пользоваться. Поэтому уменьшаем ручные действия и автоматизируем, используя систему непрерывной интеграции(CI систему), которая в фоне будет запускать проверку синтаксиса, интеграцию и результат, на каждое изменение. Автоматизация исключает человеческий фактор, улучшает качество и скорость тестирования. Я рассмотрю подробно CI систему Travis CI, в других системах сценарий использования будет похожим.&lt;/p&gt;

&lt;h4&gt;Travis CI&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://habrastorage.org/files/727/4fb/387/7274fb3871e4480489712fa8d66ce2e0.jpeg&quot; height=&quot;100&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Это SaaS система непрерывной интеграции для GitHub проектов. Бесплатна для публичных репозиториев. Подходит для тестирования инфраструктурного кода. Есть интеграция с Chef Supermarket и Puppet Forge, о них я расскажу позже.
Но есть и ограничения,  тестовое окружение в Travis CI основано на Ubuntu 12.04 LTS, поэтому если вы используете другой дистрибутив или пишете кросс-платформенный код, то не сможете его протестировать. Плюс тестовое окружение идет вместе с предустановленными пакетами и переменными окружения, которые могут вызвать конфликты.&lt;/p&gt;

&lt;h4&gt;Travis CI + Test Kitchen&lt;/h4&gt;
&lt;p&gt;Чтобы обойти эти ограничения, можно использовать две системы Test Kitchen и Travis CI вместе и запускать виртуальные машины в облаке, например, Amazon или DigitalOcean. Таким образом у вас будет один набор тестов  и инструментов как для локального, так и удаленного тестирования.&lt;/p&gt;

&lt;h4&gt;Другие CI системы&lt;/h4&gt;
&lt;p&gt;Если вы уже используете какую-либо CI систему, то процесс по тестированию инфраструктуры можно построить и на ней, также используя Test Kitchen для запуска кода и набора тестов.&lt;/p&gt;

&lt;h4&gt;Делимся с сообществом&lt;/h4&gt;
&lt;p&gt;Итого, инфраструктурный код у нас будет в одном стиле, удобный для поддержки, внесения изменений и обучения. Не стыдно показать другим. Поэтому делимся с сообществом и выкладываем в open source. С помощью сообщества можно улучшить тестирование и функционал инфраструктурного кода. За счет экспертизы и взгляда со стороны развитие не останавливается.&lt;/p&gt;

&lt;h4&gt;Делимся&lt;/h4&gt;

&lt;p&gt;Разработчики систем управления конфигурацией выпустили специальные платформы для обмена инфраструктурным кодом:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://supermarket.chef.io&quot;&gt;Chef Supermarket&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://forge.puppetlabs.com&quot;&gt;Puppet Forge&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://galaxy.ansible.com&quot;&gt;Ansible Galaxy&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/saltstack-formulas&quot;&gt;Salt Stack Formulas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;У каждой из них есть свои достоинства и недостатки. В Supermarket есть проблема с именованием кукбука, оно должно быть уникальным, поэтому стандартные имена уже заняты и каждый начинает придумывать что-то свое. В Chef Supermarket и Puppet Forge нужно заливать свои модули и кукбуки, это приводит к тому, что в них находятся устаревшие версии. В Ansible такой проблемы нет, так как Galaxy следит за репозиторием. В Ansible есть опросник по ролям, в Supermarket встроен Foodcritic. Chef Supermarket можно поставить локально, если вы в большой компании и несколько команд опсов. Salt Formulas только появился и расположен на GitHub.&lt;/p&gt;

&lt;h4&gt;Не забываем&lt;/h4&gt;
&lt;p&gt;Выкладывая код в open source не забываем про следующие моменты:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Удалить приватную информацию (ключи, пароли, внутренние компоненты)&lt;/li&gt;
	&lt;li&gt;Добавить тесты и статус сборки, это повышает степень доверия к коду&lt;/li&gt;
	&lt;li&gt;Вести историю изменений и документацию, их можно создавать автоматически&lt;/li&gt;
	&lt;li&gt;Подумать о совместимости, зависимостях и конфликтах&lt;/li&gt;
	&lt;li&gt;Синхронизировать код с платформой сообщества&lt;/li&gt;
	&lt;li&gt;Добавить лицензию&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Как это делаем мы&lt;/h4&gt;
&lt;p&gt;Как это делаем мы в Express 42, на &lt;a href=&quot;https://github.com/express42-cookbooks/postgresql_lwrp&quot;&gt;примере&lt;/a&gt; нашего Chef кукбука postgresql_lwrp:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Код лежит в репозитории на GitHub&lt;/li&gt;
	&lt;li&gt;На каждое изменение запускается билд в Travis CI&lt;/li&gt;
	&lt;li&gt;Выполняются проверки стиля языка и кода с помощью Rubocop и Foodcritic &lt;/li&gt;
	&lt;li&gt;Далее Test Kitchen запускает виртуальную машину в облаке Digital Ocean и выполняет код и Serverspec тесты&lt;/li&gt;
	&lt;li&gt;Если все тесты прошли и был релиз, то кукбук загружается в Chef Supermarket&lt;/li&gt;
	&lt;li&gt;А нам приходит нотификация в Slack чат и обновляется статус сборки на странице кукбука&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Выводы&lt;/h4&gt;
&lt;p&gt;Тестируйте изменения, автоматизируйте и делитесь с сообществом.&lt;/p&gt;

&lt;h4&gt;Ссылки&lt;/h4&gt;
&lt;p&gt;На GitHub у нас есть &lt;a href=&quot;https://github.com/express42-cookbooks&quot;&gt;примеры тестирования&lt;/a&gt; для Chef, самый популярный это &lt;a href=&quot;https://github.com/express42-cookbooks/postgresql_lwrp&quot;&gt;postgresql кукбук&lt;/a&gt;. В ближайшее время мы выложим еще несколько классных кукбуков. Также мы продолжаем &lt;a href=&quot;http://habrahabr.ru/company/express42/blog/&quot;&gt;цикл статей&lt;/a&gt; на Хабрахабре про тестирование Chef, слушайте наш подкаст &lt;a href=&quot;http://devopsdeflope.ru&quot;&gt;Devops Дефлопе&lt;/a&gt; и приходите на &lt;a href=&quot;http://www.meetup.com/DevOps-Moscow-in-Russian/&quot;&gt;DevOps митапы&lt;/a&gt; в Москве.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Aug 2015 19:21:13 +0300</pubDate>
        <link>http://ikurochkin.github.io/2015/08/16/testing-infrastructure-as-code.html</link>
        <guid isPermaLink="true">http://ikurochkin.github.io/2015/08/16/testing-infrastructure-as-code.html</guid>
        
        
      </item>
    
  </channel>
</rss>
